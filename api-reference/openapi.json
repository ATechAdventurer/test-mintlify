{
  "openapi": "3.0.3",
  "info": {
    "title": "T-Mobile DevEdge API",
    "description": "SDKs for the T-Mobile DevEdge API.\n**Note:** You must have an active <a href='/dashboard/subscription'>subscription</a> in order to <a href='/documentation-hub/api-security/base-url'>view the base URL</a>.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1",
    "contact": {
      "name": "T-Mobile Developer Support",
      "url": "https://developer.t-mobile.com/support"
    }
  },
  "servers": [
    {
      "url": "https://naas.t-mobile.com"
    },
    {
      "url": "{apiRoot}/{basePath}",
      "variables": {
        "apiRoot": {
          "description": "The DevEdge QoD <a href='/documentation-hub/api-security/base-url'>base URL</a>",
          "default": "https://naas.t-mobile.com"
        },
        "basePath": {
          "default": "qod/v0",
          "description": "Base path for the QoD API"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Connectivity",
      "description": "Operations related to SIM cards and devices.",
      "x-displayName": "Connectivity"
    },
    {
      "name": "Device Location",
      "description": "Operations related device locations.",
      "x-displayName": "Device Location"
    },
    {
      "name": "QoS sessions",
      "x-displayName": "QoS sessions"
    },
    {
      "name": "Session notifications callback",
      "x-displayName": "Session notifications callback"
    }
  ],
  "paths": {
    "/iot-connectivity/v1/devices/{iccid}": {
      "get": {
        "tags": [
          "Connectivity"
        ],
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nresult = sdk.connectivity.get_device_details(\n    iccid=\"iccid\",\n    x_transaction_id=\"X-transaction-id\"\n)\""
          },
          {
            "lang": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/connectivity\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nparams := connectivity.GetDeviceDetailsRequestParams{}\n\n\nresponse, err := client.Connectivity.GetDeviceDetails(context.Background(), \"iccid\", params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)"
          }
        ],
        "summary": "Returns detailed connectivity information about a specified SIM card.",
        "description": "Returns detailed connectivity information about a specified SIM card.",
        "operationId": "GetDeviceDetails",
        "parameters": [
          {
            "name": "iccid",
            "in": "path",
            "description": "The SIM card's ICCID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8901882024109918312"
          },
          {
            "$ref": "#/components/parameters/TransactionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeviceDetailsResponse"
          },
          "400": {
            "$ref": "#/components/responses/GenericError"
          },
          "404": {
            "$ref": "#/components/responses/GenericError"
          },
          "500": {
            "$ref": "#/components/responses/GenericError"
          },
          "503": {
            "$ref": "#/components/responses/GenericError"
          }
        }
      }
    },
    "/iot-location/v1/locationCheck": {
      "post": {
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\nfrom t_mobile_dev_edge.models import DeviceLocationRequest\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nrequest_body = DeviceLocationRequest(\n    iccid=\"8901882024109918312\",\n    horizontal_precision=\"AREA\",\n    resp_time_out=30,\n    max_cache_age=300\n)\n\nresult = sdk.device_location.location_check(request_body=request_body)"
          },
          {
            "lang": "Go",
            "source": "\n  import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/devicelocation\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nrequest := devicelocation.DeviceLocationRequest{}\n\nresponse, err := client.DeviceLocation.LocationCheck(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n  "
          }
        ],
        "tags": [
          "Device Location"
        ],
        "summary": "Returns location details about a specified SIM.",
        "description": "Returns location details about a specified SIM.",
        "operationId": "LocationCheck",
        "requestBody": {
          "$ref": "#/components/requestBodies/DeviceLocationRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeviceLocationResponse"
          },
          "400": {
            "$ref": "#/components/responses/GenericError"
          },
          "404": {
            "$ref": "#/components/responses/GenericError"
          },
          "500": {
            "$ref": "#/components/responses/GenericError"
          },
          "503": {
            "$ref": "#/components/responses/GenericError"
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\nfrom t_mobile_dev_edge.models import CreateSession\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nrequest_body = CreateSession(\n    duration=86400,\n    ue_id={\n        \"external_id\": \"123456789@domain.com\",\n        \"msisdn\": \"123456789\",\n        \"ipv4addr\": \"192.168.0.1/24\",\n        \"ipv6addr\": \"2001:db8:85a3:8d3:1319:8a2e:370:7344\"\n    },\n    as_id={\n        \"ipv4addr\": \"192.168.0.1/24\",\n        \"ipv6addr\": \"2001:db8:85a3:8d3:1319:8a2e:370:7344\"\n    },\n    ue_ports={\n        \"ranges\": [\n            {\n                \"from_\": 45217,\n                \"to\": 63830\n            }\n        ],\n        \"ports\": [\n            36703\n        ]\n    },\n    as_ports={\n        \"ranges\": [\n            {\n                \"from_\": 45217,\n                \"to\": 63830\n            }\n        ],\n        \"ports\": [\n            36703\n        ]\n    },\n    qos=\"QOS_E\",\n    notification_url=\"https://application-server.com\",\n    notification_auth_token=\"c8974e592c2fa383d4a3960714\"\n)\n\nresult = sdk.qo_s_sessions.create_session(\n    request_body=request_body,\n    authorization=\"Authorization\",\n    x_authorization=\"X-Authorization\",\n    x_transaction_id=\"X-transaction-id\"\n)"
          },
          {
            "lang": "Go",
            "source": "\n  import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/qossessions\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nparams := qossessions.CreateSessionRequestParams{}\n\n\n\nueId := qossessions.UeId{}\n\n\nasId := qossessions.AsId{}\n\nqosProfile := qossessions.QOS_PROFILE_QOS_E\n\nrequest := qossessions.CreateSession{}\nrequest.SetUeId(ueId)\nrequest.SetAsId(asId)\nrequest.SetQos(qosProfile)\n\nresponse, err := client.QoSSessions.CreateSession(context.Background(), request, params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n  "
          }
        ],
        "tags": [
          "QoS sessions"
        ],
        "summary": "Creates a new session",
        "description": "Creates a new QoS session on demand",
        "operationId": "createSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccessToken"
          },
          {
            "$ref": "#/components/parameters/PopToken"
          },
          {
            "$ref": "#/components/parameters/TransactionId"
          }
        ],
        "requestBody": {
          "description": "Creates a new session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSession"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "examples": {
                  "Generic400": {
                    "summary": "Schema validation failed",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Schema validation failed at  ..."
                    }
                  },
                  "MsisdnRequired": {
                    "summary": "msisdn is required as part of ueId",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Expected property is missing: ueId.msisdn"
                    }
                  },
                  "IPv4Required": {
                    "summary": "ipv4addr is required as part of ueId",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Expected property is missing: ueId.ipv4addr"
                    }
                  },
                  "IPRequired": {
                    "summary": "Some IP address is required as part of ueId",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Expected property is missing: ueId.ipv4addr or ueId.ipv6addr"
                    }
                  },
                  "UePortsRequired": {
                    "summary": "uePorts is required",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Expected property is missing: uePorts"
                    }
                  },
                  "QoSRequired": {
                    "summary": "qos is required",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Expected property is missing: qos"
                    }
                  },
                  "UePortsRangesNotAllowed": {
                    "summary": "Ranges at uePorts are not allowed",
                    "value": {
                      "reasonCode": "ERR-4000",
                      "systemMessage": "Bad Request",
                      "userMessage": "Ranges not allowed: uePorts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "example": {
                  "reasonCode": "ERR-409",
                  "systemMessage": "CONFLICT",
                  "userMessage": "Another session is created for the same UE"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "example": {
                  "reasonCode": "ERR-5000",
                  "systemMessage": "Internal Server Error",
                  "userMessage": "Sorry, something went wrong. Please try again later."
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          }
        },
        "security": [
          {
            "oAuth2ClientCredentials": []
          }
        ]
      }
    },
    "/sessions/{sessionId}": {
      "get": {
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nresult = sdk.qo_s_sessions.get_session(\n    session_id=\"eu commodo\",\n    authorization=\"Authorization\",\n    x_authorization=\"X-Authorization\",\n    x_transaction_id=\"X-transaction-id\"\n)"
          },
          {
            "lang": "Go",
            "source": "\n  import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/qossessions\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nparams := qossessions.GetSessionRequestParams{}\n\n\nresponse, err := client.QoSSessions.GetSession(context.Background(), \"sessionId\", params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n  "
          }
        ],
        "tags": [
          "QoS sessions"
        ],
        "summary": "Get session information",
        "operationId": "getSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccessToken"
          },
          {
            "$ref": "#/components/parameters/PopToken"
          },
          {
            "$ref": "#/components/parameters/TransactionId"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Session ID that was obtained from the createSession operation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SessionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contains information about active session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "404": {
            "$ref": "#/components/responses/SessionNotFound404"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "example": {
                  "reasonCode": "ERR-5000",
                  "systemMessage": "INTERNAL",
                  "userMessage": "Could not get session information"
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          }
        },
        "security": [
          {
            "oAuth2ClientCredentials": []
          }
        ]
      },
      "delete": {
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nresult = sdk.qo_s_sessions.delete_session(\n    session_id=\"mollit qu\",\n    authorization=\"Authorization\",\n    x_authorization=\"X-Authorization\",\n    x_transaction_id=\"X-transaction-id\"\n)"
          },
          {
            "lang": "Go",
            "source": "\n  import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/qossessions\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nparams := qossessions.DeleteSessionRequestParams{}\n\n\nresponse, err := client.QoSSessions.DeleteSession(context.Background(), \"sessionId\", params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n  "
          }
        ],
        "tags": [
          "QoS sessions"
        ],
        "summary": "Free resources related to QoS session",
        "operationId": "deleteSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccessToken"
          },
          {
            "$ref": "#/components/parameters/PopToken"
          },
          {
            "$ref": "#/components/parameters/TransactionId"
          },
          {
            "name": "sessionId",
            "in": "path",
            "description": "Session ID that was obtained from the createSession operation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SessionId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session deleted"
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "404": {
            "$ref": "#/components/responses/SessionNotFound404"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "example": {
                  "reasonCode": "ERR-5000",
                  "systemMessage": "INTERNAL",
                  "userMessage": "Session could not be deleted"
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          }
        },
        "security": [
          {
            "oAuth2ClientCredentials": []
          }
        ]
      }
    },
    "/notifications": {
      "post": {
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "from t_mobile_dev_edge import TMobileDevEdge, Environment\nfrom t_mobile_dev_edge.models import Notification\n\nsdk = TMobileDevEdge(\n    client_id=\"\",\n    client_secret=\"\",\n    private_key=\"\",\n    base_url=Environment.DEFAULT.value\n)\n\nrequest_body = Notification(\n    session_id=\"in dolor molli\",\n    event=\"SESSION_TERMINATED\"\n)\n\nresult = sdk.session_notifications_callback.post_notification(\n    request_body=request_body,\n    authorization=\"Authorization\",\n    x_authorization=\"X-Authorization\",\n    x_transaction_id=\"X-transaction-id\"\n)"
          },
          {
            "lang": "Go",
            "source": "\n  import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedgeconfig\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/tmobiledevedge\"\n  \"github.com/liblaber/tmobile-combined-go-sdk/pkg/sessionnotificationscallback\"\n)\n\nconfig := tmobiledevedgeconfig.NewConfig()\nclient := tmobiledevedge.NewTMobileDevEdge(config)\n\n\nparams := sessionnotificationscallback.PostNotificationRequestParams{}\n\n\nsessionEvent := sessionnotificationscallback.SESSION_EVENT_SESSION_TERMINATED\n\nrequest := sessionnotificationscallback.Notification{}\nrequest.SetSessionId(\"SessionId\")\nrequest.SetEvent(sessionEvent)\n\nresponse, err := client.SessionNotificationsCallback.PostNotification(context.Background(), request, params)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n  "
          }
        ],
        "tags": [
          "Session notifications callback"
        ],
        "summary": "Session notifications callback",
        "description": "Important: this endpoint is to be implemented by the API consumer.\nThe QoD server will call this endpoint whenever any network related event occurs.\nCurrently only SESSION_TERMINATED event is implemented. Any other network events are ignored.\n",
        "operationId": "postNotification",
        "parameters": [
          {
            "$ref": "#/components/parameters/AccessToken"
          },
          {
            "$ref": "#/components/parameters/PopToken"
          },
          {
            "$ref": "#/components/parameters/TransactionId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notification"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful notification"
          },
          "400": {
            "$ref": "#/components/responses/Generic400"
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                },
                "example": {
                  "reasonCode": "ERR-5000",
                  "systemMessage": "INTERNAL",
                  "userMessage": "Failed to handle notification"
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "TransactionId": {
        "name": "X-transaction-id",
        "in": "header",
        "description": "The transaction ID. Represents the API transaction, for use in debugging.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "AccessToken": {
        "name": "Authorization",
        "in": "header",
        "description": "Your [access token](/documentation-hub/api-security/authentication-coding-apis#request-id-and-access-tokens).",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "eyJraWQiOiJmYjk3ZGQxZi0xMDUzLTRiZGEtYjQ2OC1lZjU3ODdmZTA1MTMiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ0bW9uLWpyNElVT25jeU9lTWRZdIiwiYXVkIjoidG1vbi1qcjRJVU9uY3lPZU1kWXdDSzFyUUd1V0RWWlpvUEFwVCIsImlzcyI6Imh0dHBzOlwvXC9hcGlzLnQtbW9iaWxlLmNvbVwvb2F1dGgyXC92MSIsImV4cCI6MTY3OTM1OTAwNCwiaWF0IjoxNjc5MzU1NDA0LemdgdhdspEeeSMNDW0.2emmeePL0239memmemIifQ.csRgOWOgRjwlY_K35hSd22SNqTS_wnSPLpXNcnh2uDxi3_wMaGmpEdv4g_EYnrfBkgbZrLam6o9dTfTmxXmx9kaSs2gAfQjq_lmTsTwMQppnCbqZ8YmRAtu9dj3mLlNKYg8aBEJnk6NxdDf5Z980k2xfUFeyNlhkrhwt3HToEPTIbspnzNgh3GEEdbwvWY8CD7gplIVHsDyWgz8cnzfL98oAuGsQLP3qnTN8oiOYJYUWdNLUxXyxgzDKpVli6WMK631phGbi2dXziY7Qz0YRQPf2fD9Da2jjNKEmfx3v9OqN2WO3YC261cJuWyd41drh2L5HiHLUxois3fHXyfNOA"
      },
      "PopToken": {
        "name": "X-Authorization",
        "in": "header",
        "description": "Your [PoP Token](/documentation-hub/api-security/authentication-coding-apis#create-a-pop-token).",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJlZHRzIjoiUp6MTl4OFo4TEJMYTBPS3pZWVRNSnpKMldKNE5YNGppoiuyrtdfswdACHFBNJHG,..JBB,JJFDWQFtVnI4OCIsInYiOiIxIiwiZXhwIjoxNjc5MzU1NTM1LCJlaHRzIjoiQ29udGVudC1UeXBlO0F1dGhvcml6YXRpb247dXJpO2h0dHAtbWV0aG9kO2JvZHkiLCJpYXQiOjE2NzkzNTU0M228ccccbgjvjrehdhYzAtZDVkMC1hNGZiLThlMTkuSUJq3IDCMG6dOPPiFQao288sjndh_5IBWHk3mD_iZZatz7B_S_qC6kfsuoBoQC0TckwTTb7kB51HJ-Z2GXpGjweDwT_oVf0w0IyvQg4b61TBU29GeTOu21UdG0hemUHfJEiiCIZNeeb9GoSifxKuuwKdeSiXAU1OqKnjcB3mbYQVsgivC7wduLUt5B70w9x5cx002xFNa_C2EMWZGhOUJafsN8UhNDdjBWQOrjEK5g9br4bBBowQQMnPIRI5JC4PiPwTCFHbki4MSZlKSjoCqZhjlnOdNcLU765iLdE_jbSazqP34glN1RTw"
      }
    },
    "schemas": {
      "Error": {
        "description": "An error response",
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "example": "ERR-1031",
            "description": "The error code"
          },
          "systemMessage": {
            "type": "string",
            "example": "Internal Server Error",
            "description": "The error message"
          },
          "userMessage": {
            "type": "string",
            "example": "Trying to parse input that is malformed or otherwise invalid",
            "description": "The error message"
          },
          "subReason": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "DeviceDetails": {
        "description": "Device details",
        "type": "object",
        "properties": {
          "iccid": {
            "type": "string",
            "example": "8901882024109918312",
            "description": "The SIM card's ICCID."
          },
          "imsi": {
            "type": "string",
            "example": "311882020991831",
            "description": "The SIM card's IMSI."
          },
          "msisdn": {
            "type": "string",
            "example": "17197158760",
            "description": "The SIM card's MSSIDN."
          },
          "imei": {
            "type": "string",
            "example": "3515211023735600",
            "description": "The device's IMEI."
          },
          "status": {
            "type": "string",
            "example": "ACTIVATED",
            "description": "The device's SIM status."
          },
          "ratePlan": {
            "type": "string",
            "example": "EDGE Plan1 - CATM 500MB",
            "description": "The connectivity rate plan."
          },
          "communicationPlan": {
            "type": "string",
            "example": "TMUS_DEVE_CATM_CCNA_DATA_SMS",
            "description": "The device's communication plan. This is an indicator of network configuration."
          },
          "customer": {
            "type": "string",
            "example": "1ff1bf2a9ee941ba9f7ac23c53f7b7d0",
            "description": "The customer associated with this device, if any. (Generally an enterprise or business unit.)"
          },
          "endConsumerId": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "The ID of the person, if any, associated with this device."
          },
          "dateActivated": {
            "type": "string",
            "example": "2022-09-27 19:47:00.481+0000",
            "description": "The date when the device was first activated."
          },
          "dateAdded": {
            "type": "string",
            "example": "2022-08-30 22:58:35.687+0000",
            "description": "The date when the device was first added."
          },
          "dateUpdated": {
            "type": "string",
            "example": "2022-09-27 19:47:00.504+0000",
            "description": "The date when the last device information update occurred."
          },
          "dateShipped": {
            "type": "string",
            "example": "2022-08-30 07:00:00.000+0000",
            "description": "The date when the device SIM was transferred from the service provider inventory into the account."
          },
          "accountId": {
            "type": "string",
            "example": "500573440",
            "description": "The account ID associated with the device."
          },
          "fixedIPAddress": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "The IPv4 address assigned to the device. This field may be null if the device communication plan uses dynamic IP addresses or if the device uses an IPv6 address instead."
          },
          "fixedIpv6Address": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "TThe IPv6 address assigned to the device. This field may be null if the device communication plan uses dynamic IP addresses or if the device uses an IPv4 address instead."
          },
          "operatorCustom1": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the service provider has created in Control Center. This information is applicable to users with service provider roles only."
          },
          "operatorCustom2": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the service provider has created in Control Center. This information is applicable to users with service provider roles only."
          },
          "operatorCustom3": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the service provider has created in Control Center. This information is applicable to users with service provider roles only."
          },
          "operatorCustom4": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the service provider has created in Control Center. This information is applicable to users with service provider roles only."
          },
          "operatorCustom5": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the service provider has created in Control Center. This information is applicable to users with service provider roles only."
          },
          "accountCustom1": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom2": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom3": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom4": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom5": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom6": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom7": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom8": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom9": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "accountCustom10": {
            "type": "string",
            "example": "CCIOTEMBISIMS",
            "description": "Values for any custom device fields the enterprise has created in Control Center. This information is applicable to users with account roles only."
          },
          "customerCustom1": {
            "type": "string",
            "example": "DevEdge",
            "description": "Values for any custom device fields the customer has created in Control Center. This information is applicable to users with customer roles only."
          },
          "customerCustom2": {
            "type": "string",
            "example": "DevEdge",
            "description": "Values for any custom device fields the customer has created in Control Center. This information is applicable to users with customer roles only."
          },
          "customerCustom3": {
            "type": "string",
            "example": "DevEdge",
            "description": "Values for any custom device fields the customer has created in Control Center. This information is applicable to users with customer roles only."
          },
          "customerCustom4": {
            "type": "string",
            "example": "DevEdge",
            "description": "Values for any custom device fields the customer has created in Control Center. This information is applicable to users with customer roles only."
          },
          "customerCustom5": {
            "type": "string",
            "example": "DevEdge",
            "description": "Values for any custom device fields the customer has created in Control Center. This information is applicable to users with customer roles only."
          },
          "simNotes": {
            "type": "string",
            "description": "Information the service provider has added about the device."
          },
          "euiccid": {
            "type": "string",
            "description": "EU ICCID"
          },
          "deviceID": {
            "type": "string",
            "description": "Optional identifier that an account or customer can give to a device."
          },
          "modemID": {
            "type": "string",
            "description": "The modem used by the device to transmit data."
          },
          "globalSimType": {
            "type": "string",
            "description": "Indicates whether the device is using a primary SIM from the lead service provider or a virtual subscription from a partner service provider."
          },
          "mec": {
            "type": "string"
          }
        }
      },
      "Iccid": {
        "description": "The SIM card's ICCID.",
        "type": "string",
        "example": "8901882024109918312"
      },
      "DeviceLocation": {
        "description": "The details of the device location",
        "type": "object",
        "properties": {
          "iccid": {
            "$ref": "#/components/schemas/Iccid"
          },
          "msisdn": {
            "type": "string",
            "example": "17197158760"
          },
          "distanceUnit": {
            "type": "string",
            "enum": [
              "meter"
            ],
            "example": "meter",
            "description": "The unit of distance."
          },
          "longitude": {
            "type": "number",
            "example": -104.866133,
            "description": "The longitude of the device.",
            "minimum": -180,
            "maximum": 180
          },
          "latitude": {
            "type": "number",
            "example": 39.122819,
            "description": "The latitude of the device.",
            "minimum": -90,
            "maximum": 90
          },
          "shape": {
            "type": "string",
            "enum": [
              "CircularArea"
            ],
            "example": "CircularArea",
            "description": "The shape of the area."
          },
          "radius": {
            "type": "number",
            "example": 468,
            "description": "The radius of the area.",
            "minimum": 0
          },
          "cellid": {
            "type": "string",
            "example": "6490371",
            "description": "The cell ID of the device."
          },
          "timestamp": {
            "type": "string",
            "example": "20220324202805",
            "description": "The timestamp of the location."
          }
        }
      },
      "DeviceLocationRequest": {
        "description": "The details of the device location request",
        "type": "object",
        "properties": {
          "iccid": {
            "$ref": "#/components/schemas/Iccid"
          },
          "horizontalPrecision": {
            "type": "string",
            "enum": [
              "AREA"
            ],
            "example": "AREA",
            "description": "The horizontal precision of the location."
          },
          "respTimeOut": {
            "type": "integer",
            "example": 30,
            "description": "The response timeout in seconds.",
            "minimum": 0,
            "maximum": 50
          },
          "maxCacheAge": {
            "type": "integer",
            "example": 300,
            "description": "The maximum cache age, in seconds.\n\nBy comparing the cache with maxCacheAge you can tell whether the information was retrieved from the server or from the cache:\n\ncache > maxCacheAge: Information is sent from the server\ncache < maxCacheAge: Information is sent from the cache\n",
            "minimum": 0,
            "maximum": 900
          }
        }
      },
      "SessionId": {
        "type": "string",
        "format": "uuid",
        "description": "Session ID in UUID format"
      },
      "SessionInfo": {
        "description": "Session related information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateSession"
          },
          {
            "type": "object",
            "required": [
              "id",
              "duration",
              "startedAt",
              "expiresAt"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/SessionId"
              },
              "startedAt": {
                "type": "integer",
                "example": 1639479600,
                "description": "Timestamp of session start in seconds since unix epoch",
                "format": "int64"
              },
              "expiresAt": {
                "type": "integer",
                "example": 1639566000,
                "description": "Timestamp of session expiration if the session was not deleted, in seconds since unix epoch",
                "format": "int64"
              },
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        ]
      },
      "CreateSession": {
        "description": "Data type with attributes required for creating a session",
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "example": 86400,
            "description": "Session duration in seconds. Maximal value of 24 hours is used if not set.\nAfter session has expired the client will receive SESSION_TERMINATED event. See notification callback.\n",
            "format": "int32",
            "minimum": 1,
            "maximum": 86400,
            "default": 86400
          },
          "ueId": {
            "$ref": "#/components/schemas/UeId"
          },
          "asId": {
            "$ref": "#/components/schemas/AsId"
          },
          "uePorts": {
            "$ref": "#/components/schemas/PortsSpec"
          },
          "asPorts": {
            "$ref": "#/components/schemas/PortsSpec"
          },
          "qos": {
            "$ref": "#/components/schemas/QosProfile"
          },
          "notificationUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://application-server.com",
            "description": "Allows asynchronous delivery of session related events"
          },
          "notificationAuthToken": {
            "type": "string",
            "example": "c8974e592c2fa383d4a3960714",
            "description": "Authentication token for callback API"
          }
        },
        "required": [
          "ueId",
          "asId",
          "qos"
        ]
      },
      "Port": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "PortsSpec": {
        "type": "object",
        "minProperties": 1,
        "properties": {
          "ranges": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "required": [
                "from",
                "to"
              ],
              "properties": {
                "from": {
                  "$ref": "#/components/schemas/Port"
                },
                "to": {
                  "$ref": "#/components/schemas/Port"
                }
              }
            }
          },
          "ports": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Port"
            }
          }
        },
        "example": {
          "ranges": [
            {
              "from": 5010,
              "to": 5020
            }
          ],
          "ports": [
            5060,
            5070
          ]
        },
        "description": "Ports may be specified as a list of ranges or single ports.\n"
      },
      "QosProfile": {
        "type": "string",
        "enum": [
          "QOS_E",
          "QOS_S",
          "QOS_M",
          "QOS_L"
        ],
        "description": "* `QOS_E` - Qualifier for enhanced communication profile\n* `QOS_S` - Qualifier for the requested QoS profile _S_\n* `QOS_M` - Qualifier for the requested QoS profile _M_\n* `QOS_L` - Qualifier for the requested QoS profile _L_\n"
      },
      "Notification": {
        "type": "object",
        "required": [
          "sessionId",
          "event"
        ],
        "properties": {
          "sessionId": {
            "$ref": "#/components/schemas/SessionId"
          },
          "event": {
            "$ref": "#/components/schemas/SessionEvent"
          }
        }
      },
      "SessionEvent": {
        "type": "string",
        "enum": [
          "SESSION_TERMINATED"
        ]
      },
      "ErrorInfo": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Code given to this error"
          },
          "message": {
            "type": "string",
            "description": "Detailed error description"
          }
        }
      },
      "UeId": {
        "type": "object",
        "minProperties": 1,
        "properties": {
          "externalId": {
            "$ref": "#/components/schemas/ExternalId"
          },
          "msisdn": {
            "$ref": "#/components/schemas/MSISDN"
          },
          "ipv4addr": {
            "$ref": "#/components/schemas/Ipv4Addr"
          },
          "ipv6addr": {
            "$ref": "#/components/schemas/Ipv6Addr"
          }
        },
        "description": "User equipment identifier"
      },
      "AsId": {
        "type": "object",
        "minProperties": 1,
        "properties": {
          "ipv4addr": {
            "$ref": "#/components/schemas/Ipv4Addr"
          },
          "ipv6addr": {
            "$ref": "#/components/schemas/Ipv6Addr"
          }
        },
        "description": "Application server identifier"
      },
      "ExternalId": {
        "type": "string",
        "example": "123456789@domain.com"
      },
      "MSISDN": {
        "type": "string",
        "pattern": "^\\+?[0-9]{5,15}$",
        "example": "123456789",
        "description": "Subscriber number in E.164 format (starting with country code). Optionally prefixed with '+'."
      },
      "Ipv4Addr": {
        "type": "string",
        "format": "ipv4",
        "pattern": "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])(?:\\.(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])){3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
        "example": "192.168.0.1/24",
        "description": "IPv4 address may be specified in form <address/mask> as:\n  - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.\n  - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.\n    In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.\n"
      },
      "Ipv6Addr": {
        "type": "string",
        "format": "ipv6",
        "pattern": "^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$",
        "example": "2001:db8:85a3:8d3:1319:8a2e:370:7344",
        "description": "IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:\n  - address - The /128 subnet is optional for single addresses:\n    - 2001:db8:85a3:8d3:1319:8a2e:370:7344\n    - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128\n  - address/mask - an IP v6 number with a mask:\n    - 2001:db8:85a3:8d3::0/64\n    - 2001:db8:85a3:8d3::/64\n"
      },
      "Message": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "enum": [
              "INFO",
              "WARNING"
            ],
            "description": "Message severity"
          },
          "description": {
            "type": "string",
            "description": "Detailed message text"
          }
        },
        "required": [
          "severity",
          "description"
        ]
      }
    },
    "responses": {
      "DeviceDetailsResponse": {
        "description": "Contains information about device connectivity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceDetails"
            }
          }
        }
      },
      "GenericError": {
        "description": "Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "DeviceLocationResponse": {
        "description": "Device location details",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceLocation"
            }
          }
        }
      },
      "Generic400": {
        "description": "Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "example": {
              "reasonCode": "ERR-4000",
              "systemMessage": "INVALID_INPUT",
              "userMessage": "Schema validation failed at  ..."
            }
          }
        }
      },
      "Generic401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "example": {
              "reasonCode": "ERR-1091",
              "systemMessage": "UNAUTHORIZED",
              "userMessage": "Authorization failed: ..."
            }
          }
        }
      },
      "Generic403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "example": {
              "reasonCode": "ERR-1043",
              "systemMessage": "FORBIDDEN",
              "userMessage": "Operation not allowed: ..."
            }
          }
        }
      },
      "SessionNotFound404": {
        "description": "Session not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "example": {
              "reasonCode": "ERR-1004",
              "systemMessage": "NOT_FOUND",
              "userMessage": "Session Id does not exist"
            }
          }
        }
      },
      "Generic503": {
        "description": "Service unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "example": {
              "reasonCode": "ERR-5003",
              "systemMessage": "SERVICE_UNAVAILABLE",
              "userMessage": "Service unavailable"
            }
          }
        }
      }
    },
    "requestBodies": {
      "DeviceLocationRequest": {
        "description": "The details of the device location request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceLocationRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "oAuth2ClientCredentials": {
        "type": "oauth2",
        "description": "This API uses OAuth 2 with the client credentials grant flow.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "{tokenUrl}",
            "scopes": {}
          }
        }
      },
      "apiKey": {
        "type": "apiKey",
        "description": "API key to authorize requests",
        "name": "apikey",
        "in": "query"
      }
    }
  }
}
